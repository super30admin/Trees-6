//TimeComplexity.  O(n)
//SpaceCompplexity. O(n)


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        
        if(root == null)return "";
        StringBuilder sb = new StringBuilder();
        
        Queue<TreeNode> q = new LinkedList<>();
        q.add(root);
       
        
        while(!q.isEmpty()){
            TreeNode curr = q.poll();
            
            if(curr == null){
                
                sb.append("#");
            }else{
                q.add(curr.left);
                q.add(curr.right);
                sb.append(curr.val);
            }
            sb.append(",");
            }
        
                 return sb.toString();
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(String data) {
        if(data == null || data.length() == 0)return null;
        
        String[] str = data.split(",");
        
      
        Queue<TreeNode> q = new LinkedList<>();
        
        TreeNode root = new TreeNode(Integer.parseInt(str[0]));
        int index = 1;
        q.add(root);
        
        
        while(!q.isEmpty() && index < str.length){
            
            TreeNode curr =q.poll();
            
            if(!str[index].equals("#")){
                curr.left = new TreeNode(Integer.parseInt(str[index]));
                q.add(curr.left);
            }            
            index++;
            
             if(!str[index].equals("#")){
            curr.right = new TreeNode(Integer.parseInt(str[index]));
                 q.add(curr.right);
             }
            index++;
        }
        
        return root;
        
        
    }
}

// Your Codec object will be instantiated and called as such:
// Codec ser = new Codec();
// Codec deser = new Codec();
// TreeNode ans = deser.deserialize(ser.serialize(root));
