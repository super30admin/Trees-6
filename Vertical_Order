//TimeComplexity.   O(n)
//SpaceComplexity.  O(n)


/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public List<List<Integer>> verticalOrder(TreeNode root) {
        
        
        List<List<Integer>> result = new ArrayList<>();
        
        if(root == null)return result;

        Queue<TreeNode> q1= new LinkedList<>();
        Queue<Integer> q2= new LinkedList<>();
        HashMap<Integer,List<Integer>> map = new HashMap<>();
        
        q1.add(root);
        q2.add(0);
        
        int min = 0;
        int max = 0;
      
        
        while(!q1.isEmpty()){
            TreeNode curr = q1.poll(); 
            int col = q2.poll();
            
            if(!map.containsKey(col)){
                map.put(col, new ArrayList<>());
            }
        map.get(col).add(curr.val);  
                
                
                if(curr.left != null)
                {
                q1.add(curr.left);
                q2.add(col-1); 
                    min = Math.min(min,col-1);               
                }
            
                if(curr.right != null)
                {
                q1.add(curr.right);
                q2.add(col+1);
                max = Math.max(max,col+1);
                }                       
        }
        
        for(int i = min ; i <= max; i++){
            result.add(map.get(i));
        }
        
        return result;
        }
    }
