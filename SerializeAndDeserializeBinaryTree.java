/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */

// Time Complexity : O(n) n -> no of nodes in tree
// Space Complexity : O(n) recursive stack space
// Did this code successfully run on Leetcode : Yes
// Any problem you faced while coding this : No

//Approach: Binary tree can be converted in preorder or post order format for serializing and deserializing.
//A marker is required for identifying null nodes and the string needs to be generated by adding a separator between two node values.
// In this solution both serialization and deserialization are done in preorder manner.

public class Codec {

    // Encodes a tree to a single string.
    public String serialize(TreeNode root) {
        if(root == null)
            return "";
        
        StringBuilder sb = new StringBuilder();
        serializeHelper(root, sb);
        System.out.println(sb.toString());
        return sb.toString();
    }
    
    private void serializeHelper(TreeNode root, StringBuilder sb) {
        if(root == null) {
            sb.append("X,");
            return;
        }
        
        sb.append(root.val+",");
        serializeHelper(root.left, sb);
        serializeHelper(root.right, sb);
    }

    // Decodes your encoded data to tree.
    int start = 0;
    public TreeNode deserialize(String data) {
        if(data == null || data.length() == 0)
            return null;
        
        String[] nodeVal = data.split(",");
        return deserializeHelper(nodeVal);
    }
    
    private TreeNode deserializeHelper(String[] nodeVal) {
        if(nodeVal.length == start || nodeVal[start].equals("X")) {
            start++;
            return null;
        }
        
        int curr = Integer.parseInt(nodeVal[start]);
        TreeNode root = new TreeNode(curr);
        start++;
        root.left = deserializeHelper(nodeVal);
        root.right = deserializeHelper(nodeVal);
        return root;
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));
